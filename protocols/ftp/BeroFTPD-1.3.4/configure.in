dnl Use autoconf 2.12 or higher to create the configure script
AC_INIT(src/ftpd.c)
AC_CONFIG_HEADER(config.h src/config.h support/config.h)
AC_PREFIX_DEFAULT(/usr)
AC_CANONICAL_SYSTEM
AC_ARG_ENABLE(upload,      [  --disable-upload        disable upload keyword in ftpaccess],
              [ upload=$enableval ], [ upload=yes ])
AC_ARG_ENABLE(overwrite,   [  --disable-overwrite     disable overwrite keyword in ftpaccess],
              [ overwrite=$enableval ], [ overwrite=yes ])
AC_ARG_ENABLE(hostxs,      [  --disable-hostxs        disable allow/deny keywords],
              [ hostxs=$enableval ], [ hostxs=yes ])
AC_ARG_ENABLE(logfail,     [  --disable-logfail       disable logging of failed logins],
              [ logfail=$enableval ], [ logfail=yes ])
AC_ARG_ENABLE(logtoomany,  [  --disable-logtoomany    disable logging of too many users],
              [ logtoomany=$enableval ], [ logtoomany=yes ])
AC_ARG_ENABLE(private,     [  --disable-private       disallow use of private file
                          (for site group and site gpass)],
              [ private=$enableval ], [ private=yes ])
AC_ARG_ENABLE(dnsretry,    [  --disable-dnsretry      don't retry failed DNS lookups],
              [ dnsretry=$enableval ], [ dnsretry=yes ])
AC_ARG_ENABLE(anononly,    [  --enable-anononly       allow only anonymous access],
              [ anononly=$enableval ], [ anononly=no ])
AC_ARG_ENABLE(paranoid,    [  --enable-paranoid       disable all SITE commands],
              [ paranoid=$enableval ], [ paranoid=no ])
AC_ARG_ENABLE(chmod-limit, [  --enable-chmod-limit    limit SITE CHMOD values to 0000-0777],
              [ chmod_limit=$enableval ], [ chmod_limit=no ])
AC_ARG_ENABLE(skey,        [  --enable-skey           enable S/Key support],
              [ skey=$enableval ], [ skey=no ])
AC_ARG_ENABLE(bsd-auth,    [  --enable-bsd-auth       use BSD/OS authentication],
              [ bsdauth=$enableval ], [ bsdauth=no ])
AC_ARG_ENABLE(mail,        [  --disable-mail          don't support notifying ftp admins of
                          anonymous uploads by e-mail], [ mail=$enableval ], [ mail=yes ])
AC_ARG_ENABLE(virtual,     [  --disable-virtual       don't support virtual servers],
              [ virtual=$enableval ], [ virtual=yes ])
AC_ARG_ENABLE(portcheck,   [  --disable-portcheck     don't check arguments to PORT command],
	      [ portcheck=$enableval ], [ portcheck=yes ])
AC_ARG_ENABLE(ratios,      [  --enable-ratios         compile in support for upload-download ratios ],
              [ ratio=$enableval ], [ ratio=no ])
AC_ARG_ENABLE(internal-ls, [  --disable-internal-ls   use an external ls program rather than
                          the internal version (see KNOWN_BUGS)],[ internal_ls=$enableval ], [ internal_ls=yes ])
AC_ARG_ENABLE(numeric-uids,[  --enable-numeric-uids   make ls report numeric UIDs rather than
                          usernames (faster) (only affects internal ls)],[ numeric_uids=$enableval ], [ numeric_uids=no ]) 
AC_ARG_ENABLE(ident,       [  --disable-ident         Do not look up ident of users], [ ident=$enableval ], [ ident=yes ])
AC_ARG_ENABLE(port,        [  --disable-port          Disable PORT command ], [ port=$enableval ], [ port=yes ])
AC_ARG_ENABLE(pasv,        [  --disable-pasv          Disable PASV command ], [ pasv=$enableval ], [ pasv=yes ])
AC_ARG_WITH(confdir,     [  --with-confdir=PATH     Place config files (ftpaccess etc) in
                          PATH (rather than /etc)], [ confdir=$withval ], [ confdir=no ])
AC_ARG_WITH(logdir,      [  --with-logdir=PATH      Place xferlog file in PATH (rather than /var/log)],
              [ logdir=$withval ], [ logdir=no ])
AC_ARG_WITH(piddir,      [  --with-piddir=PATH      Place pid files in PATH (rather than /var/run)],
              [ piddir=$withval ], [ piddir=no ])
AC_ARG_ENABLE(standalone,[  --enable-standalone     Enable the -S and -s options to run
                          standalone (without inetd)], [ standalone=$enableval ], [ standalone=no ])
AC_ARG_WITH(backlog,     [  --with-backlog=x        Set size of maximum queue of pending
                          connections in standalone mode (default: 100)],
                          [ backlog=$withval ], [ backlog=100 ])
AC_ARG_ENABLE(mapping-chdir,
                         [  --disable-mapping-chdir Return absolute disk paths for PWD],
                         [ mapping_chdir=$enableval ], [ mapping_chdir=yes ])
AC_ARG_ENABLE(throughput,[  --enable-throughput     Keep track of total throughput, limit if required],
                         [ throughput=$enableval ], [ throughput=no ])
AC_ARG_ENABLE(transfer-cnt,
                         [  --enable-transfer-cnt   Keep track of total bytes for statistics],
                         [ transfer_cnt=$enableval ], [ transfer_cnt=no ])
AC_ARG_ENABLE(transfer-lim,
                         [  --enable-transfer-lim   Limit files and bytes transferred],
                         [ transfer_lim=$enableval ], [ transfer_lim=no ])
AC_ARG_ENABLE(newlines,  [  --disable-newlines      Suppress some extra blank lines on messages/banners],
                         [ newlines=$enableval ], [ newlines=yes ])
AC_ARG_ENABLE(oldvirt,   [  --enable-oldvirt        Enable old-style (wu-ftpd) virtual hosts],
                         [ oldvirt=$enableval ], [ oldvirt=no ])
AC_ARG_ENABLE(crackers,
                         [  --enable-crackers       Let crackers figure out which usernames exist],
                         [ crackers=$enableval ], [ crackers=no ])
AC_ARG_ENABLE(passwd,    [  --enable-passwd         Support other passwd/shadow files ],
                         [ passwd=$enableval ], [ passwd=no ])
AC_ARG_ENABLE(opie,      [  --enable-opie           Support OPIE (One-time Passwords In Everything],
                         [ opie=$enableval ], [ opie=no ])
AC_ARG_ENABLE(quota,     [  --enable-quota          Quota support ],
                         [ quota=$enableval ], [ quota=no ])
AC_ARG_WITH(krb5,        [  --with-krb5=PATH        Kerberos 5 support],
              [ krb5=$withval ], [ krb5=no ])
AC_ARG_WITH(afs,         [  --with-afs=PATH         AFS support],
              [ afs=$withval ], [ afs=no ])
AC_ARG_ENABLE(pam,       [  --enable-pam            PAM support],
              [ pam=$enableval ], [ pam=no ])

dnl check for programs
AC_PROG_CC
AC_ISC_POSIX
AC_PROG_RANLIB
AC_PROG_YACC
AC_PROG_INSTALL

AC_CHECK_PROGS(AR,ar gar,NO)
if test $AR = NO; then
  AC_MSG_ERROR(You need ar or gar - if you have a replacement instead, notify beroftpd-bugs@linux.net.eu.org)
fi
AC_SUBST(AR)

AC_HEADER_STDC
AC_HEADER_TIME

dnl check which functions we need in libsupport
AC_CHECK_FUNC(usercmp,, AUTHUSER="authuser.o")
AC_CHECK_FUNC(fnmatch,, FNMATCH="fnmatch.o")
AC_CHECK_FUNC(ftw,, FTW="ftw.o")
AC_CHECK_FUNC(getusershell,, GETUSERSHELL="getusershell.o")
AC_CHECK_FUNC(setuid,, SCO="sco.o")
AC_CHECK_FUNC(snprintf,, SNPRINTF="snprintf.o")
AC_CHECK_FUNC(strcasestr,, STRCASESTR="strcasestr.o")
AC_CHECK_FUNC(strdup,, STRDUP="strdup.o")
AC_CHECK_FUNC(strerror,, STRERROR="strerror.o")
AC_CHECK_FUNC(strsep,, STRSEP="strsep.o")
AC_CHECK_FUNC(strstr,, STRSTR="strstr.o")
AC_CHECK_FUNC(strcasecmp,, STRCASECMP="strcasecmp.o")
AC_CHECK_FUNC(strncasecmp,, STRNCASECMP="strncasecmp.o")
AC_CHECK_FUNC(syslog,, SYSLOG="syslog.o")
dnl We need glob() only for the internal ls command; no need to check for
dnl it if we don't want the ls command.
if test "$internal_ls" = "yes"; then
  AC_CHECK_HEADERS(glob.h fnmatch.h)
  AC_CHECK_FUNC(glob,, GLOB="glob.o")
  AC_MSG_CHECKING(type of qsort)
  AC_TRY_COMPILE([#include <stdlib.h>
extern void qsort();],[  ], result=void, result=int)
  AC_MSG_RESULT($result)
  if test "$result" = "void"; then
    AC_DEFINE(QSORT_IS_VOID)
  fi
  if test ! "$ac_cv_func_glob" = "yes"; then
    if test ! "$ac_cv_header_glob_h" = "yes"; then
      ln support/BeroFTPD_glob.h support/glob.h
    fi
    if test ! "$ac_cv_header_fnmatch_h" = "yes"; then
      ln support/BeroFTPD_fnmatch.h support/fnmatch.h
    fi
  fi
fi
AC_SUBST(AUTHUSER)
AC_SUBST(FNMATCH)
AC_SUBST(FTW)
AC_SUBST(GETUSERSHELL)
AC_SUBST(SCO)
AC_SUBST(SNPRINTF)
AC_SUBST(STRCASESTR)
AC_SUBST(STRDUP)
AC_SUBST(STRERROR)
AC_SUBST(STRSEP)
AC_SUBST(STRSTR)
AC_SUBST(STRCASECMP)
AC_SUBST(STRNCASECMP)
AC_SUBST(SYSLOG)
AC_SUBST(GLOB)

dnl generate config.h
if test "$upload" = "yes"; then
  AC_DEFINE(UPLOAD)
fi
if test "$overwrite" = "yes"; then
  AC_DEFINE(OVERWRITE)
fi
if test "$hostxs" = "yes"; then
  AC_DEFINE(HOST_ACCESS)
fi
if test "$logfail" = "yes"; then
  AC_DEFINE(LOG_FAILED)
fi
if test "$logtoomany" = "yes"; then
  AC_DEFINE(LOG_TOOMANY)
fi
if test "$private" = "no"; then
  AC_DEFINE(NO_PRIVATE)
fi
if test "$dnsretry" = "yes"; then
  AC_DEFINE(DNS_TRYAGAIN)
fi
if test "$anononly" = "yes"; then
  AC_DEFINE(ANON_ONLY)
fi
if test "$paranoid" = "yes"; then
  AC_DEFINE(PARANOID)
fi
if test "$chmod_limit" = "yes"; then
  AC_DEFINE(CHMOD_LIMIT)
fi
if test "$skey" = "yes"; then
  AC_DEFINE(SKEY)
  LIBS="$LIBS -lskey"
fi
if test "$mail" = "yes"; then
  AC_DEFINE(MAIL_ADMIN)
fi
if test "$virtual" = "yes"; then
  AC_DEFINE(VIRTUAL)
fi
if test "$portcheck" = "yes"; then
  AC_DEFINE(PORT_CHECK)
fi
if test "$ratio" = "yes"; then
  AC_DEFINE(RATIO)
fi
if test "$internal_ls" = "yes"; then
  AC_DEFINE(INTERNAL_LS)
fi
if test "$numeric_uids" = "yes"; then
  AC_DEFINE(LS_NUMERIC_UIDS)
fi
if test "$ident" = "yes"; then
  AC_DEFINE(USE_RFC931)
fi
if test "$port" = "no"; then
  AC_DEFINE(DISABLE_PORT)
fi
if test "$pasv" = "no"; then
  AC_DEFINE(DISABLE_PASV)
fi
if test "$bsdauth" = "yes"; then
  AC_DEFINE(BSD_AUTH)
fi
if test "$standalone" = "yes"; then
  AC_DEFINE(DAEMON)
fi
AC_DEFINE_UNQUOTED(MAX_BACKLOG,$backlog)
if test "$mapping_chdir" = "yes"; then
  AC_DEFINE(MAPPING_CHDIR)
fi
if test "$throughput" = "yes"; then
  AC_DEFINE(THROUGHPUT)
fi
if test "$transfer_cnt" = "yes"; then
  AC_DEFINE(TRANSFER_COUNT)
fi
if test "$transfer_lim" = "yes"; then
  AC_DEFINE(TRANSFER_LIMIT)
fi
if test "$newlines" = "no"; then
  AC_DEFINE(NO_SUCKING_NEWLINES)
fi
if test "$oldvirt" = "yes"; then
  AC_DEFINE(OLDVIRT)
fi
if test "$crackers" = "yes"; then
  AC_DEFINE(HELP_CRACKERS)
fi
if test "$passwd" = "yes"; then
  AC_DEFINE(OTHER_PASSWD)
  # We will also need to compile the getpwnam/... replacements
  GETPWNAM_C="getpwnam.c"
  GETPWNAM_O="getpwnam.o"
  AC_SUBST(GETPWNAM_C)
  AC_SUBST(GETPWNAM_O)
fi
if test "$opie" = "yes"; then
  AC_CHECK_HEADER(opie.h)
  if test ! "$ac_cv_header_opie_h" = "yes"; then
    AC_MSG_ERROR(You need OPIE libraries for OPIE support... ftp://ftp.inner.net/pub/opie/)
  else
    AC_DEFINE(OPIE)
  fi
fi
if test "$quota" = "yes"; then
  AC_DEFINE(QUOTA)
  AC_CHECK_HEADERS(sys/quota.h ufs/quota.h jfs/quota.h ufs/ufs/quota.h linux/quota.h)
  AC_MSG_CHECKING(if there is a dqb_isoftlimit field in the dqblk structure)
  AC_TRY_COMPILE([
#include <sys/types.h>
#ifdef HAVE_SYS_QUOTA_H
#include <sys/quota.h>
#else
#ifdef HAVE_LINUX_QUOTA_H
#include <linux/quota.h>
#endif
#endif
#ifdef HAVE_UFS_QUOTA_H
#include <ufs/quota.h>
#endif
#ifdef HAVE_JFS_QUOTA_H
#include <jfs/quota.h>
#endif
#ifdef HAVE_UFS_UFS_QUOTA_H
#include <ufs/ufs/quota.h>
#endif
],[struct dqblk q; q.dqb_isoftlimit=0;],result=yes,result=no)
  if test "$result" = "yes"; then
    AC_DEFINE(HAVE_DQBLK_DQB_ISOFTLIMIT)
  fi
  AC_MSG_RESULT($result)

  AC_MSG_CHECKING(if there is a dqb_ihardlimit field in the dqblk structure)
  AC_TRY_COMPILE([
#include <sys/types.h>
#ifdef HAVE_SYS_QUOTA_H
#include <sys/quota.h>
#else
#ifdef HAVE_LINUX_QUOTA_H
#include <linux/quota.h>
#endif
#endif
#ifdef HAVE_UFS_QUOTA_H
#include <ufs/quota.h>
#endif
#ifdef HAVE_JFS_QUOTA_H
#include <jfs/quota.h>
#endif
#ifdef HAVE_UFS_UFS_QUOTA_H
#include <ufs/ufs/quota.h>
#endif
],[struct dqblk q; q.dqb_ihardlimit=0;],result=yes,result=no)
  if test "$result" = "yes"; then
    AC_DEFINE(HAVE_DQBLK_DQB_IHARDLIMIT)
  fi
  AC_MSG_RESULT($result)

  AC_MSG_CHECKING(if there is a dqb_curinodes field in the dqblk structure)
  AC_TRY_COMPILE([
#include <sys/types.h>
#ifdef HAVE_SYS_QUOTA_H
#include <sys/quota.h>
#else
#ifdef HAVE_LINUX_QUOTA_H
#include <linux/quota.h>
#endif
#endif
#ifdef HAVE_UFS_QUOTA_H
#include <ufs/quota.h>
#endif
#ifdef HAVE_JFS_QUOTA_H
#include <jfs/quota.h>
#endif
#ifdef HAVE_UFS_UFS_QUOTA_H
#include <ufs/ufs/quota.h>
#endif
],[struct dqblk q; q.dqb_curinodes=0;],result=yes,result=no)
  if test "$result" = "yes"; then
    AC_DEFINE(HAVE_DQBLK_DQB_CURINODES)
  fi
  AC_MSG_RESULT($result)

  AC_MSG_CHECKING(if there is a dqb_btime field in the dqblk structure)
  AC_TRY_COMPILE([
#include <sys/types.h>
#ifdef HAVE_SYS_QUOTA_H
#include <sys/quota.h>
#else
#ifdef HAVE_LINUX_QUOTA_H
#include <linux/quota.h>
#endif
#endif
#ifdef HAVE_UFS_QUOTA_H
#include <ufs/quota.h>
#endif
#ifdef HAVE_JFS_QUOTA_H
#include <jfs/quota.h>
#endif
#ifdef HAVE_UFS_UFS_QUOTA_H
#include <ufs/ufs/quota.h>
#endif
],[struct dqblk q; q.dqb_btime=0;],result=yes,result=no)
  if test "$result" = "yes"; then
    AC_DEFINE(HAVE_DQBLK_DQB_BTIME)
  fi
  AC_MSG_RESULT($result)
fi
if test "$pam" = "yes"; then
  AC_CHECK_HEADER(security/pam_appl.h)
  if test ! "$ac_cv_header_security_pam_appl_h" = "yes"; then
    AC_MSG_ERROR(You either do not have PAM libraries or you are using incompatible ones.)
  else
    AC_DEFINE(USE_PAM)
    AC_CHECK_LIB(dl,dlopen,result=yes,result=no)
    if test "$result" = "yes"; then
      LIBS="$LIBS -lpam -ldl"
    else
      LIBS="$LIBS -lpam"
    fi
  fi
fi
dnl look what our system can do...
AC_FUNC_VFORK
AC_CHECK_FUNCS(dirfd flock getcwd getdtablesize getrlimit sysinfo sysconf memcpy memmove sigemptyset regexec regex setreuid seteuid setegid setgrent strtoul setcompat fgetpwent fgetspent lstat fchdir)
AC_CHECK_HEADERS(unistd.h stdlib.h fcntl.h dirent.h ftw.h regex.h shadow.h grp.h alloca.h sys/termio.h sys/statvfs.h sys/statfs.h sys/vfs.h sys/systeminfo.h syslog.h sys/syslog.h sys/param.h limits.h values.h bsd/bsd.h posix1_lim.h xopen_lim.h confname.h sys/file.h utmpx.h sac.h strings.h string.h memory.h ndir.h sys/ndir.h sys/dir.h config.h libgen.h paths.h mntent.h arpa/ftp.h)

AC_MSG_CHECKING(how to printf an off_t)
AC_TRY_RUN([#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
int main(int argc, char **argv) {
  if(sizeof(off_t)<=4)
    return 0;
  return 1;
}],[ result="%u"
AC_DEFINE_UNQUOTED(PRINTF_QD,"$result")
AC_MSG_RESULT(off_t is just a long - using %u)],[ result="no" ], [ result="no" ])
if test $result = "no"; then
  AC_TRY_RUN([#include <stdio.h>
  int main(int argc, char **argv) {
    if(printf("%qd",(long long) 1)==1)
      return 0;
    return 1;
  }],[ result="%qd" ],[ result="no" ], [ result="no"])
  if test $result = "no"; then
    AC_TRY_RUN([#include <stdio.h>
    int main(int argc, char **argv) {
      if(printf("%Ld",(long long) 1)==1)
        return 0;
      return 1;
    }],[ result="%Ld" ],[ result="no" ], [ result="no" ])
    if test $result = "no"; then
      AC_TRY_RUN([#include <stdio.h>
      int main(int argc, char **argv) {
        if(printf("%lld",(long long) 1)==1)
          return 0;
        return 1;
      }],[ result="%lld" ],[ result="no" ], [ result="no" ])
      if test $result = "no"; then
        AC_TRY_RUN([#include <stdio.h>
        int main(int argc, char **argv) {
          if(printf("%ld",(long long) 1)==1)
            return 0;
          return 1;
        }],[ result="%ld" ],[ result="%d" ], [ result="%d" ])
      fi
    fi
  fi
  AC_DEFINE_UNQUOTED(PRINTF_QD,"$result")
  AC_MSG_RESULT($result)
fi

AC_MSG_CHECKING(if openlog requires 3 arguments)
AC_TRY_COMPILE([#ifdef HAVE_SYSLOG_H
#include <syslog.h>
#endif
#ifdef HAVE_SYS_SYSLOG_H
#include <sys/syslog.h>
#endif],[ openlog("",0,0) ], result=yes, result=no)
AC_MSG_RESULT($result)
if test "$result" = "yes"; then
  AC_MSG_CHECKING(which facility openlog understands)
  AC_TRY_COMPILE([#ifdef HAVE_SYSLOG_H
#include <syslog.h>
#endif
#ifdef HAVE_SYS_SYSLOG_H
#include <sys/syslog.h>
#endif],[ openlog("",0,LOG_FTP) ], result=yes, result=no)
  if test "$result" = "yes"; then
    FACILITY="LOG_FTP"
  else
    AC_TRY_COMPILE([#ifdef HAVE_SYSLOG_H
#include <syslog.h>
#endif
#ifdef HAVE_SYS_SYSLOG_H
#include <sys/syslog.h>
#endif],[ openlog("",0,LOG_DAEMON) ], result=yes, result=no)
    if test "$result" = "yes"; then
      FACILITY="LOG_DAEMON"
    else
      AC_TRY_COMPILE([#ifdef HAVE_SYSLOG_H
#include <syslog.h>
#endif
#ifdef HAVE_SYS_SYSLOG_H
#include <sys/syslog.h>
#endif], [ openlog("",0,LOG_LOCAL7)], result=yes, result=no)
      if test "$result" = "yes"; then
        FACILITY="LOG_LOCAL7"
      fi
    fi
  fi
  AC_MSG_RESULT($FACILITY)
  AC_DEFINE_UNQUOTED(FACILITY, $FACILITY)
fi

dnl some systems (FreeBSD 3) require time.h to be included before utmp.h :/
AC_MSG_CHECKING(if there is a ut_host field in the utmp structure)
AC_TRY_COMPILE([
#ifdef TIME_WITH_SYS_TIME
#include <sys/time.h>
#include <time.h>
#else
#ifdef HAVE_SYS_TIME_H
#include <sys/time.h>
#else
#include <time.h>
#endif
#endif
#include <utmp.h>],[struct utmp ut; puts(ut.ut_host);],result=yes,result=no)
if test "$result" = "yes"; then
  AC_DEFINE(HAVE_UT_UT_HOST)
fi
AC_MSG_RESULT($result)

AC_MSG_CHECKING(if there is a ut_pid field in the utmp structure)
AC_TRY_COMPILE([#ifdef TIME_WITH_SYS_TIME
#include <sys/time.h>
#include <time.h>
#else
#ifdef HAVE_SYS_TIME_H
#include <sys/time.h>
#else
#include <time.h>
#endif
#endif
#include <utmp.h>],[struct utmp ut; int i; i=ut.ut_pid;],result=yes,result=no)
if test "$result" = "yes"; then
  AC_DEFINE(HAVE_UT_UT_PID)
fi
AC_MSG_RESULT($result)

AC_MSG_CHECKING(if there is a ut_id field in the utmp structure)
AC_TRY_COMPILE([#ifdef TIME_WITH_SYS_TIME
#include <sys/time.h>
#include <time.h>
#else
#ifdef HAVE_SYS_TIME_H
#include <sys/time.h>
#else
#include <time.h>
#endif
#endif
#include <utmp.h>],[struct utmp ut; puts(ut.ut_id);],result=yes,result=no)
if test "$result" = "yes"; then
  AC_DEFINE(HAVE_UT_UT_ID)
fi
AC_MSG_RESULT($result)

AC_MSG_CHECKING(if there is a ut_name field in the utmp structure)
AC_TRY_COMPILE([#ifdef TIME_WITH_SYS_TIME
#include <sys/time.h>
#include <time.h>
#else
#ifdef HAVE_SYS_TIME_H
#include <sys/time.h>
#else
#include <time.h>
#endif
#endif
#include <utmp.h>],[struct utmp ut; puts(ut.ut_name);],result=yes,result=no)
if test "$result" = "yes"; then
  AC_DEFINE(HAVE_UT_UT_NAME)
fi
AC_MSG_RESULT($result)

AC_MSG_CHECKING(if there is a ut_type field in the utmp structure)
AC_TRY_COMPILE([#ifdef TIME_WITH_SYS_TIME
#include <sys/time.h>
#include <time.h>
#else
#ifdef HAVE_SYS_TIME_H
#include <sys/time.h>
#else
#include <time.h>
#endif
#endif
#include <utmp.h>],[struct utmp ut; int i; i=(int) ut.ut_type;],result=yes,result=no)
if test "$result" = "yes"; then
  AC_DEFINE(HAVE_UT_UT_TYPE)
fi
AC_MSG_RESULT($result)

AC_MSG_CHECKING(if there is a ut_exit.e_termination field in the utmp structure)
AC_TRY_COMPILE([#ifdef TIME_WITH_SYS_TIME
#include <sys/time.h>
#include <time.h>
#else
#ifdef HAVE_SYS_TIME_H
#include <sys/time.h>
#else
#include <time.h>
#endif
#endif
#include <utmp.h>],[struct utmp ut; ut.ut_exit.e_termination=0;],result=yes,result=no)
if test "$result" = "yes"; then
  AC_DEFINE(HAVE_UT_UT_EXIT_E_TERMINATION)
fi
AC_MSG_RESULT($result)

if test "$ac_cv_header_utmpx_h" = "yes"; then
  AC_MSG_CHECKING(if there is a ut_syslen field in the utmpx structure)
  AC_TRY_COMPILE([#define _GNU_SOURCE
#include <utmpx.h>],[struct utmpx ut; ut.ut_syslen=0;],result=yes,result=no)
  if test "$result" = "yes"; then
    AC_DEFINE(HAVE_UTX_UT_SYSLEN)
  fi
  AC_MSG_RESULT($result)

  AC_MSG_CHECKING(how to determine wtmpx file)
  AC_TRY_COMPILE([#define _GNU_SOURCE
#include <utmpx.h>], [char *x=WTMPX_FILE;], WTMPX_FILE=WTMPX_FILE, WTMPX_FILE="")
  if test "$WTMPX_FILE" = ""; then
    AC_TRY_COMPILE([#define _GNU_SOURCE
#include <utmpx.h>], [char *x=_PATH_WTMPX;], WTMPX_FILE=_PATH_WTMPX, WTMPX_FILE="")
    if test "$WTMPX_FILE" = ""; then
      AC_TRY_COMPILE([#define _GNU_SOURCE
#include <utmpx.h>], [char *x=WTMPX_FILENAME;], WTMPX_FILE=WTMPX_FILENAME)
      if test "$WTMPX_FILE" = ""; then
        # some systems suck... Try finding a wtmp file instead.
        AC_TRY_COMPILE([#define _GNU_SOURCE
#include <utmpx.h>], [char *x=WTMP_FILE;], WTMPX_FILE=WTMP_FILE, WTMPX_FILE="")
        if test "$WTMPX_FILE" = ""; then
          AC_TRY_COMPILE([#define _GNU_SOURCE
#include <utmpx.h>], [char *x=_PATH_WTMP;], WTMPX_FILE=_PATH_WTMP, WTMPX_FILE="")
          if test "$WTMPX_FILE" = ""; then
            AC_TRY_COMPILE([#define _GNU_SOURCE
#include <utmpx.h>], [char *x=WTMP_FILENAME;], WTMPX_FILE=WTMP_FILENAME)
            if test "$WTMPX_FILE" = ""; then
              # some systems REALLY suck...
              AC_MSG_ERROR(Cannot find out how to locate wtmpx file. Contact beroftpd-bugs@beroftpd.unix.eu.org.)
            fi
          fi
        fi
      fi
    fi
  fi
fi
AC_DEFINE_UNQUOTED(WTMPX_FILE,$WTMPX_FILE)
AC_MSG_RESULT($WTMPX_FILE)

AC_TYPE_SIZE_T
AC_MSG_CHECKING(whether we need printf %ld for pidof_t)
AC_TRY_RUN([#include <stdlib.h>
int main(int argc, char **argv) {
  if(sizeof(pid_t)<=4)
    return 0;
  return 1;
}],[ result="no" ], [ result="yes" ], [ result="yes" ])
AC_MSG_RESULT($result)
if test $result = "no"; then
  AC_DEFINE(PID_T_IS_LONG)
fi

dnl see what libraries we have to link...
AC_CHECK_LIB(crypt,crypt,result=yes,result=no)
if test "$result" = "yes"; then
  LIBS="$LIBS -lcrypt"
fi
USENSL=no
AC_CHECK_LIB(socket,socket,result=yes,result=no)
if test "$result" = "yes"; then
  LIBS="$LIBS -lsocket"
else
  AC_CHECK_LIB(socket,socket,result=yes,result=no,-lnsl)
  if test "$result" = "yes"; then
    LIBS = "$LIBS -lsocket -lnsl"
    USENSL=yes
  else
    AC_CHECK_LIB(socket,connect,result=yes,result=no)
    if test "$result" = "yes"; then
      LIBS="$LIBS -lsocket"
    else
      AC_CHECK_LIB(socket,connect,result=yes,result=no,-lnsl)
      if test "$result" = "yes"; then
        LIBS="$LIBS -lsocket -lnsl"
        USENSL=yes
      fi
    fi
  fi
fi
if test "$USENSL" != "yes"; then
  AC_CHECK_LIB(nsl,inet_addr,result=yes,result=no)
  if test "$result" = "yes"; then
    LIBS="$LIBS -lnsl"
  fi
fi
AC_CHECK_LIB(shadow,setspent,result=yes,result=no)
if test "$result" = "yes"; then
  LIBS="$LIBS -lshadow"
  SHADOW_PASSWORD=1
  LIBSHADOW=1
else
  AC_CHECK_LIB(shadow,getspnam,result=yes,result=no)
  if test "$result" = "yes"; then
    LIBS="$LIBS -lshadow"
    SHADOW_PASSWORD=1
    LIBSHADOW=1
  else
    dnl some libc's (glibc 2.x) keep shadow functions in -lc
    AC_CHECK_LIB(c,setspent,result=yes,result=no)
    if test "$result" = "yes"; then
      if test -f /etc/shadow; then
        SHADOW_PASSWORD=1
      fi
    fi
  fi
fi
if test "$SHADOW_PASSWORD" = "1"; then
  if test "$ac_cv_func_fgetspent" != "yes"; then
    AC_CHECK_LIB(shadow,fgetspent,result=yes,result=no)
    if test "$result" = "yes"; then
      if test "$LIBSHADOW" != "1"; then
        LIBS="$LIBS -lshadow"
      fi
    fi
  fi
  AC_DEFINE(SHADOW_PASSWORD)
fi

dnl checking for krb5 support
AC_MSG_CHECKING(if we should support krb5 auth and GSSAPI connections)
if test "$krb5" != "no"; then
  if test "$krb5" = "yes"; then
    krb5=/usr/krb5
  fi
  CFLAGS="$CFLAGS -I${krb5}/include"
  LIBS="$LIBS -L${krb5}/lib -lgssapi_krb5 -ldes425 -lkrb5 -lcrypto -lcom_err"
  AC_DEFINE(KRB5)
  GETPWNAM_C="secure.c"
  GETPWNAM_O="secure.o"
  AC_SUBST(SECURE_C)
  AC_SUBST(SECURE_O)
  AC_MSG_RESULT([enabled, prefix is ${krb5}])
else
  AC_MSG_RESULT([disabled]) 
fi

dnl checking for afs support
AC_MSG_CHECKING(if we should support AFS KA password authentication)
if test "$afs" != "no"; then
  if test "$afs" = "yes"; then
    afs=/usr/afsws
  fi
  CFLAGS="$CFLAGS -I${afs}/include"
  LIBS="$LIBS -L${afs}/lib -L${afs}/lib/afs -lkauth -lprot -lubik"
  LIBS="$LIBS -lauth -lrxkad -lsys -ldes -lrx -llwp -lcom_err"
  if test -e ${afs}/lib/afs/libaudit.a; then
    LIBS="$LIBS -laudit"
  fi
  LIBS="$LIBS -lsys -lrx -llwp ${afs}/lib/afs/util.a"

  case $target_os in
    hpux* )
      LIBS="$LIBS -lBSD"
      ;;
  esac
  AC_DEFINE(AFS)
  AC_MSG_RESULT([enabled, prefix is ${afs}])
else
  AC_MSG_RESULT([disabled])
fi

dnl check for buffer size to use
AC_MSG_CHECKING(for ftp command buffer size)
if test "$krb5" != "no"; then
  AC_DEFINE_UNQUOTED(FTP_BUFSIZ,10240)
  AC_MSG_RESULT([large, required by krb5 gssapi support])
else
  AC_DEFINE_UNQUOTED(FTP_BUFSIZ,1024)
  AC_MSG_RESULT([normal])
fi

dnl see if we support links...
AC_MSG_CHECKING(if we can do hard links)
ln configure src/link.tst 2>&5
if test -x src/link.tst; then
  CPLN="ln"
  rm -f src/link.tst
  AC_MSG_RESULT(yes - using ln)
else
  CPLN="cp"
  AC_MSG_RESULT(no - using cp)
fi
AC_SUBST(CPLN)


dnl look for install dirs
if test "${prefix}" = "NONE"; then
    prefix=/usr
fi
if test "${exec_prefix}" = "NONE"; then
    exec_prefix=$prefix
fi

AC_MSG_CHECKING(where to put configuration files)
if test "$confdir" = "no"; then
  confdir="/etc"
fi
CONFDIR=$confdir
AC_SUBST(CONFDIR)
AC_MSG_RESULT($confdir)

AC_MSG_CHECKING(how to determine bytesize)
if test "$ac_cv_header_bsd_bsd_h" = "yes"; then
  AC_TRY_COMPILE([ #include <bsd/bsd.h> ],[ int i=NBBY ], NBBY=NBBY, NBBY=8)
else
  AC_TRY_COMPILE([ #include <sys/param.h> ],[ int i=NBBY ], NBBY=NBBY, NBBY=8)
fi
if test "$NBBY" = "8"; then
  AC_TRY_COMPILE([ #include <values.h> ],[ int i=BITSPERBYTE ], NBBY=BITSPERBYTE, NBBY=8)
  if test "$NBBY" = "8"; then
    AC_TRY_COMPILE([ #include <limits.h> ],[ int i=CHAR_BIT ], NBBY=CHAR_BIT, NBBY=8)
    if test "$NBBY" != "8"; then
      AC_DEFINE(NEED_LIMITS_H)
    else
      AC_TRY_COMPILE([ #include <sys/types.h> ],[ int i=NBBY ], NBBY=NBBY, NBBY=8)
    fi
  else
    AC_DEFINE(NEED_VALUES_H)
  fi
else
  if test "$ac_cv_header_bsd_bsd_h" = "yes"; then
    AC_DEFINE(NEED_BSD_BSD_H)
  else
    AC_DEFINE(NEED_SYS_PARAM_H)
  fi
fi
if test "$NBBY" = "8"; then
  AC_MSG_RESULT(can't be determined - assuming 8)
else
  AC_MSG_RESULT($NBBY)
fi
if test "$NBBY" != "NBBY"; then
  AC_DEFINE_UNQUOTED(NBBY,$NBBY)
fi

AC_MSG_CHECKING(for NCARGS)
AC_TRY_COMPILE([#include <sys/param.h>], [int i=NCARGS], NCARGS=NCARGS, NCARGS=4096)
if test "$NCARGS" = "4096"; then
  AC_TRY_COMPILE([#include <bsd/bsd.h>], [int i=NCARGS], NCARGS=NCARGS, NCARGS=4096)
  if test "$NCARGS" = "4096"; then
    AC_TRY_COMPILE([#include <posix1_lim.h>], [int i=_POSIX_ARG_MAX], NCARGS=_POSIX_ARG_MAX, NCARGS=4096)
    if test "$NCARGS" = "4096"; then
      AC_TRY_COMPILE([#include <confname.h>], [int i=ARG_MAX], NCARGS=ARG_MAX, NCARGS=4096)
      if test "$NCARGS" = "4096"; then
        AC_TRY_COMPILE([#include <confname.h>], [int i=_SC_ARG_MAX], NCARGS=_SC_ARG_MAX, NCARGS=4096)
        if test "$NCARGS" = "4096"; then
          AC_TRY_COMPILE([#include <xopen_lim.h>], [int i=NL_ARGMAX], NCARGS=NL_ARGMAX, NCARGS="4096")
          if test "$NCARGS" != "4096"; then
            AC_DEFINE(NEED_XOPEN_LIM_H)
          fi
        else
          AC_DEFINE(NEED_CONFNAME_H)
        fi
      else
        AC_DEFINE(NEED_CONFNAME_H)
      fi
    else
      AC_DEFINE(NEED_POSIX1_LIM_H)
    fi
  else
    AC_DEFINE(NEED_BSD_BSD_H)
  fi
else
  AC_DEFINE(NEED_SYS_PARAM_H)
fi
if test "$NCARGS" = "4096"; then
  AC_MSG_RESULT(Can't be determined - assuming 4096)
else
  AC_MSG_RESULT($NCARGS)
fi
if test "$NCARGS" != "NCARGS"; then
  AC_DEFINE_UNQUOTED(NCARGS,$NCARGS)
fi

AC_MSG_CHECKING(for L_INCR)
if test "$ac_cv_header_bsd_bsd_h" = "yes" ; then
  AC_TRY_COMPILE([#include <bsd/bsd.h>],[int i=L_INCR],L_INCR=L_INCR,L_INCR=1)
  if test "$L_INCR" != "1"; then
    AC_DEFINE(NEED_BSD_BSD_H)
  fi
else
  AC_TRY_COMPILE([#include <unistd.h>],[int i=L_INCR],L_INCR=L_INCR,L_INCR=1)
fi
if test "$L_INCR" = "1"; then
  if test "$ac_cv_header_sys_file_h" = "yes"; then
    AC_TRY_COMPILE([#include <sys/file.h>],[int i=L_INCR],L_INCR=L_INCR,L_INCR=1)
  fi
fi
if test "$L_INCR" = "1"; then
  AC_TRY_COMPILE([#include <unistd.h>],[int i=SEEK_CUR],L_INCR=SEEK_CUR,L_INCR=1)
fi
AC_MSG_RESULT(L_INCR)
if test "$L_INCR" = "1"; then
  AC_MSG_WARN(CANNOT FIND L_INCR OR SEEK_CUR, ASSUMING 1, THIS IS PROBABLY WRONG!)
  AC_MSG_WARN(REPORT THIS TO beroftpd-bugs@linux.net.eu.org !)
fi
if test "$L_INCR" != "L_INCR"; then
  AC_DEFINE_UNQUOTED(L_INCR, $L_INCR)
fi

AC_MSG_CHECKING(where to put log files)
if test "$logdir" = "no"; then
  if test -d "/var/log"; then
    logdir="/var/log"
  elif test -d "/var/adm"; then
    logdir="/var/adm"
  elif test -d "/usr/adm"; then
    logdir="/usr/adm"
  elif test -d "/usr/local/adm"; then
    logdir="/usr/local/adm"
  else
    logdir="/usr/adm"
  fi
fi
LOGDIR=$logdir
AC_SUBST(LOGDIR)
AC_MSG_RESULT($logdir)

AC_MSG_CHECKING(where to put PID files)
if test "$piddir" = "no"; then
  if test -d "/var/pid"; then
    piddir="/var/pid"
  elif test -d "/var/run"; then
    piddir="/var/run"
  elif test -d "/var/adm"; then
    piddir="/var/adm"
  elif test -d "/usr/adm"; then
    piddir="/usr/adm"
  elif test -d "/usr/local/adm"; then
    piddir="/usr/local/adm"
  else
    piddir="/usr/adm"
  fi
fi
PIDDIR=$piddir
AC_SUBST(PIDDIR)
AC_MSG_RESULT($piddir)

AC_MSG_CHECKING(where your system keeps the utmp file)
if test -f "/var/run/utmp"; then
  utmp="/var/run/utmp"
elif test -f "/etc/utmp"; then
  utmp="/etc/utmp"
elif test -f "/var/adm/utmp"; then
  utmp="/var/adm/utmp"
elif test -f "/var/log/utmp"; then
  utmp="/var/log/utmp"
fi
if test -z $utmp; then
  AC_MSG_WARN(Cannot find your utmp file!)
  AC_MSG_WARN(Please tell beroftpd-bugs@aachen.linux.de which system)
  AC_MSG_WARN(you're using, and where the utmp file is.)
  AC_MSG_WARN(The location can usually be found using the command)
  AC_MSG_WARN(find / -name utmp.)
  AC_MSG_WARN(In the mean time, you can compile by editing src/pathnames.h)
  utmp="UNKNOWN"
fi
UTMP=$utmp
AC_SUBST(UTMP)
AC_MSG_RESULT($UTMP)

AC_MSG_CHECKING(where your system keeps the wtmp file)
if test -f "/var/run/wtmp"; then
  wtmp="/var/run/wtmp"
elif test -f "/var/adm/wtmp"; then
  wtmp="/var/adm/wtmp"
elif test -f "/var/log/wtmp"; then
  wtmp="/var/log/wtmp"
elif test -f "/etc/wtmp"; then
  wtmp="/etc/wtmp"
fi
if test -z $wtmp; then
  AC_MSG_WARN(Cannot find your wtmp file!)
  AC_MSG_WARN(Please tell beroftpd-bugs@aachen.linux.de which system)
  AC_MSG_WARN(you're using, and where the wtmp file is.)
  AC_MSG_WARN(The location can usually be found using the command)
  AC_MSG_WARN(find / -name wtmp.)
  AC_MSG_WARN(In the mean time, you can compile by editing src/pathnames.h)
  wtmp="UNKNOWN"
fi
WTMP=$wtmp
AC_SUBST(WTMP)
AC_MSG_RESULT($WTMP)

dnl lastlog seems to be just dead code from wu-ftpd - it's not used
dnl anywhere. -> REMOVED
dnl AC_MSG_CHECKING(where your system keeps the lastlog file)
dnl if test -f "/var/adm/lastlog"; then
dnl   lastlog="/var/adm/lastlog"
dnl elif test -f "/var/log/lastlog"; then
dnl   lastlog="/var/log/lastlog"
dnl dnl I know the following path is RIDICULOUS, but it's apparently what
dnl dnl early versions of SuSE Linux used...
dnl elif test -f "/usr/sbin/lastlog"; then
dnl   lastlog="/usr/sbin/lastlog"
dnl fi
dnl if test -z $lastlog; then
dnl   AC_MSG_WARN(Cannot find your lastlog file!)
dnl   AC_MSG_WARN(Please tell beroftpd-bugs@aachen.linux.de which system)
dnl   AC_MSG_WARN(you're using, and where the lastlog file is.)
dnl   AC_MSG_WARN(The location can usually be found using the command)
dnl   AC_MSG_WARN(find / -name lastlog.)
dnl   AC_MSG_WARN(In the mean time, you can compile by editing src/pathnames.h)
dnl   lastlog="UNKNOWN"
dnl fi
dnl LASTLOG=$lastlog
dnl AC_SUBST(LASTLOG)
dnl AC_MSG_RESULT($LASTLOG)

AC_OUTPUT(Makefile support/Makefile src/Makefile src/pathnames.h src/ftpck/Makefile)
